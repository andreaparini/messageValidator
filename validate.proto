/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   validate.proto
 * Author: a.parini
 *
 * Created on 16 gennaio 2019, 16.44
 */

syntax = "proto3";
package validate;


import "google/protobuf/descriptor.proto";
import "google/protobuf/wrappers.proto";

// Validation rules applied at the message level
extend google.protobuf.MessageOptions {
    // Disabled nullifies any validation rules for this message, including any
    // message fields associated with it that do support validation.
    bool disabled = 919191;
}

// Validation rules applied at the oneof level
extend google.protobuf.OneofOptions {
    // Required ensures that exactly one the field options in a oneof is set;
    // validation fails if no fields in the oneof are set.
    bool required = 919191;
}

// Validation rules applied at the field level
extend google.protobuf.FieldOptions {
    // Rules specify the validations to be performed on this field. By default,
    // no validation is performed against a field.
    FieldRules rules = 919191;
}

// FieldRules encapsulates the rules for each type of field. Depending on the
// field, the correct set should be used to ensure proper validations.
message FieldRules {
    oneof type {
        // Scalar Field Types
        FloatRules    floatrules    = 1;
        DoubleRules   doublerules   = 2;
        Int32Rules    int32rules    = 3;
        Int64Rules    int64rules    = 4;
        UInt32Rules   uint32rules   = 5;
        UInt64Rules   uint64rules   = 6;
        SInt32Rules   sint32rules   = 7;
        SInt64Rules   sint64rules   = 8;
    }
}

// FloatRules describes the constraints applied to `float` values
message FloatRules {
    // Const specifies that this field must be exactly the specified value
    float equal = 1;

    // Lt specifies that this field must be less than the specified value,
    // exclusive
    float lt = 2;

    // Lte specifies that this field must be less than or equal to the
    // specified value, inclusive
    float lte = 3;

    // Gt specifies that this field must be greater than the specified value,
    // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    // range is reversed.
    float gt = 4;

    // Gte specifies that this field must be greater than or equal to the
    // specified value, inclusive. If the value of Gte is larger than a
    // specified Lt or Lte, the range is reversed.
    float gte = 5;

    
}

// DoubleRules describes the constraints applied to `double` values
message DoubleRules {
    // Const specifies that this field must be exactly the specified value
    double equal = 1;

    // Lt specifies that this field must be less than the specified value,
    // exclusive
    double lt = 2;

    // Lte specifies that this field must be less than or equal to the
    // specified value, inclusive
    double lte = 3;

    // Gt specifies that this field must be greater than the specified value,
    // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    // range is reversed.
    double gt = 4;

    // Gte specifies that this field must be greater than or equal to the
    // specified value, inclusive. If the value of Gte is larger than a
    // specified Lt or Lte, the range is reversed.
    double gte = 5;

    
}

// Int32Rules describes the constraints applied to `int32` values
message Int32Rules {
    // Const specifies that this field must be exactly the specified value
    google.protobuf.Int32Value equal = 1;

    // Lt specifies that this field must be less than the specified value,
    // exclusive
    google.protobuf.Int32Value lt = 2;

    // Lte specifies that this field must be less than or equal to the
    // specified value, inclusive
    google.protobuf.Int32Value lte = 3;

    // Gt specifies that this field must be greater than the specified value,
    // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    // range is reversed.
    google.protobuf.Int32Value gt = 4;

    // Gte specifies that this field must be greater than or equal to the
    // specified value, inclusive. If the value of Gte is larger than a
    // specified Lt or Lte, the range is reversed.
    google.protobuf.Int32Value gte = 5;

    
}

// Int64Rules describes the constraints applied to `int64` values
message Int64Rules {
    // Const specifies that this field must be exactly the specified value
    int64 equal = 1;

    // Lt specifies that this field must be less than the specified value,
    // exclusive
    int64 lt = 2;

    // Lte specifies that this field must be less than or equal to the
    // specified value, inclusive
    int64 lte = 3;

    // Gt specifies that this field must be greater than the specified value,
    // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    // range is reversed.
    int64 gt = 4;

    // Gte specifies that this field must be greater than or equal to the
    // specified value, inclusive. If the value of Gte is larger than a
    // specified Lt or Lte, the range is reversed.
    int64 gte = 5;

    
}

// UInt32Rules describes the constraints applied to `uint32` values
message UInt32Rules {
    // Const specifies that this field must be exactly the specified value
    uint32 equal = 1;

    // Lt specifies that this field must be less than the specified value,
    // exclusive
    uint32 lt = 2;

    // Lte specifies that this field must be less than or equal to the
    // specified value, inclusive
    uint32 lte = 3;

    // Gt specifies that this field must be greater than the specified value,
    // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    // range is reversed.
    uint32 gt = 4;

    // Gte specifies that this field must be greater than or equal to the
    // specified value, inclusive. If the value of Gte is larger than a
    // specified Lt or Lte, the range is reversed.
    uint32 gte = 5;

    
}

// UInt64Rules describes the constraints applied to `uint64` values
message UInt64Rules {
    // Const specifies that this field must be exactly the specified value
    uint64 equal = 1;

    // Lt specifies that this field must be less than the specified value,
    // exclusive
    uint64 lt = 2;

    // Lte specifies that this field must be less than or equal to the
    // specified value, inclusive
    uint64 lte = 3;

    // Gt specifies that this field must be greater than the specified value,
    // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    // range is reversed.
    uint64 gt = 4;

    // Gte specifies that this field must be greater than or equal to the
    // specified value, inclusive. If the value of Gte is larger than a
    // specified Lt or Lte, the range is reversed.
    uint64 gte = 5;

    
}

// SInt32Rules describes the constraints applied to `sint32` values
message SInt32Rules {
    // Const specifies that this field must be exactly the specified value
    sint32 equal = 1;

    // Lt specifies that this field must be less than the specified value,
    // exclusive
    sint32 lt = 2;

    // Lte specifies that this field must be less than or equal to the
    // specified value, inclusive
    sint32 lte = 3;

    // Gt specifies that this field must be greater than the specified value,
    // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    // range is reversed.
    sint32 gt = 4;

    // Gte specifies that this field must be greater than or equal to the
    // specified value, inclusive. If the value of Gte is larger than a
    // specified Lt or Lte, the range is reversed.
    sint32 gte = 5;

    
}

// SInt64Rules describes the constraints applied to `sint64` values
message SInt64Rules {
    // Const specifies that this field must be exactly the specified value
    sint64 equal = 1;

    // Lt specifies that this field must be less than the specified value,
    // exclusive
    sint64 lt = 2;

    // Lte specifies that this field must be less than or equal to the
    // specified value, inclusive
    sint64 lte = 3;

    // Gt specifies that this field must be greater than the specified value,
    // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    // range is reversed.
    sint64 gt = 4;

    // Gte specifies that this field must be greater than or equal to the
    // specified value, inclusive. If the value of Gte is larger than a
    // specified Lt or Lte, the range is reversed.
    sint64 gte = 5;

    
}

